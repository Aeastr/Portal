name: Pre-release

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  pre-release:
    name: Create Pre-release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for changelog generation
        fetch-depth: 0

    - name: Extract version from PR title
      id: version
      shell: bash
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"

        # Try to extract version number (supports formats like "4.3.0", "Release 4.3.0", "v4.3.0")
        VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)

        if [ -z "$VERSION" ]; then
          echo "No version number found in PR title - skipping pre-release"
          echo "is_release_pr=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Validate semantic versioning format
        if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "::error::Version '$VERSION' is not valid semantic versioning (expected: MAJOR.MINOR.PATCH)"
          exit 1
        fi

        echo "is_release_pr=true" >> $GITHUB_OUTPUT
        echo "base_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted base version: $VERSION"

    - name: Validate version is not already released
      if: steps.version.outputs.is_release_pr == 'true'
      shell: bash
      run: |
        BASE_VERSION="${{ steps.version.outputs.base_version }}"

        # Fetch all tags
        git fetch --tags

        # Check if the final version already exists (non-prerelease)
        if git tag -l | grep -qE "^${BASE_VERSION}$"; then
          echo "::error::Version $BASE_VERSION already exists as a final release"
          echo "::error::Please update your PR title to use a new version number (e.g., bump to next version)"

          # Comment on PR with helpful message
          gh pr comment "${{ github.event.pull_request.number }}" \
            --body "❌ **Cannot create pre-release for $BASE_VERSION**

          Version $BASE_VERSION already exists as a final release.

          **Action required:** Update your PR title to use a new version number.

          Example:
          - Current: \`Release $BASE_VERSION: ...\`
          - Update to: \`Release $(($(echo $BASE_VERSION | cut -d. -f3) + 1 | xargs echo $BASE_VERSION | cut -d. -f1-2).): ...\`

          Or manually determine the next appropriate version based on your changes."

          exit 1
        fi

        echo "Version $BASE_VERSION is available for pre-release"

    - name: Check if current commit already has pre-release
      id: check_existing
      if: steps.version.outputs.is_release_pr == 'true'
      shell: bash
      run: |
        BASE_VERSION="${{ steps.version.outputs.base_version }}"
        CURRENT_SHA="${{ github.event.pull_request.head.sha }}"

        # Fetch all tags (already fetched above, but keeping for safety)
        git fetch --tags

        # Check if current commit already has a pre-release tag
        EXISTING_TAG=$(git tag --points-at "$CURRENT_SHA" | grep -E "^${BASE_VERSION}-[0-9]+$" || echo "")

        if [ -n "$EXISTING_TAG" ]; then
          echo "Current commit already has pre-release tag: $EXISTING_TAG"
          echo "has_prerelease=true" >> $GITHUB_OUTPUT
          echo "existing_tag=$EXISTING_TAG" >> $GITHUB_OUTPUT
        else
          echo "No pre-release found for current commit"
          echo "has_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Determine pre-release number
      id: prerelease
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false'
      shell: bash
      run: |
        BASE_VERSION="${{ steps.version.outputs.base_version }}"

        # Fetch all tags
        git fetch --tags

        # Find existing pre-release tags for this version
        EXISTING_PRERELEASES=$(git tag -l "${BASE_VERSION}-*" | grep -E "^${BASE_VERSION}-[0-9]+$" || echo "")

        if [ -z "$EXISTING_PRERELEASES" ]; then
          # No existing pre-releases, start at 1
          PRERELEASE_NUM=1
        else
          # Find the highest pre-release number
          HIGHEST=$(echo "$EXISTING_PRERELEASES" | sed "s/${BASE_VERSION}-//" | sort -n | tail -1)
          PRERELEASE_NUM=$((HIGHEST + 1))
        fi

        PRERELEASE_TAG="${BASE_VERSION}-${PRERELEASE_NUM}"
        echo "Pre-release tag: $PRERELEASE_TAG"
        echo "tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        echo "number=$PRERELEASE_NUM" >> $GITHUB_OUTPUT

    - name: Generate changelog from commits
      id: changelog
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false'
      shell: bash
      run: |
        BASE_VERSION="${{ steps.version.outputs.base_version }}"

        # Get the previous release tag (non-prerelease)
        PREV_TAG=$(git tag -l --sort=-v:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1)

        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to HEAD"

          # Generate changelog from commits
          CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)

          if [ -n "$CHANGELOG" ]; then
            echo "## Changes since $PREV_TAG" > changelog.txt
            echo "" >> changelog.txt
            echo "$CHANGELOG" >> changelog.txt
          else
            echo "## Changes since $PREV_TAG" > changelog.txt
            echo "" >> changelog.txt
            echo "_No new commits since last release_" >> changelog.txt
          fi
        else
          echo "## Initial Release (Pre-release)" > changelog.txt
          echo "" >> changelog.txt
          echo "First pre-release of Portal" >> changelog.txt
        fi

        cat changelog.txt

    - name: Prepare release notes
      id: notes
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false'
      shell: bash
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        PRERELEASE_NUM="${{ steps.prerelease.outputs.number }}"
        BASE_VERSION="${{ steps.version.outputs.base_version }}"

        # Start with pre-release header
        echo "# Pre-release $PRERELEASE_NUM for $BASE_VERSION" > release_notes.txt
        echo "" >> release_notes.txt
        echo "⚠️ **This is a pre-release version for testing purposes.**" >> release_notes.txt
        echo "" >> release_notes.txt

        # Add PR body if present
        if [ -n "$(echo "$PR_BODY" | tr -d '[:space:]')" ]; then
          echo "## Proposed Changes" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "$PR_BODY" >> release_notes.txt
          echo "" >> release_notes.txt
        fi

        # Add separator and changelog
        echo "---" >> release_notes.txt
        echo "" >> release_notes.txt
        cat changelog.txt >> release_notes.txt

        # Save to output with unique delimiter
        DELIMITER="EOF_$(date +%s)_$$"
        echo "notes<<$DELIMITER" >> $GITHUB_OUTPUT
        cat release_notes.txt >> $GITHUB_OUTPUT
        echo "$DELIMITER" >> $GITHUB_OUTPUT

    - name: Check if pre-release tag already exists
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"

        # Check if tag exists remotely (shouldn't happen with auto-increment, but safety check)
        if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
          echo "::error::Pre-release tag $TAG already exists. This shouldn't happen - check tag generation logic."
          exit 1
        fi

        echo "Pre-release tag $TAG is available"

    - name: Create and push pre-release tag
      id: create_tag
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Create annotated tag
        git tag -a "$TAG" -m "Pre-release ${{ steps.prerelease.outputs.number }} for ${{ steps.version.outputs.base_version }}"

        # Push tag with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if git push origin "$TAG"; then
            echo "Successfully pushed pre-release tag $TAG"
            echo "success=true" >> $GITHUB_OUTPUT
            exit 0
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Failed to push tag (attempt $RETRY_COUNT/$MAX_RETRIES)"
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              sleep 2
            fi
          fi
        done

        echo "::error::Failed to push pre-release tag after $MAX_RETRIES attempts"
        echo "success=false" >> $GITHUB_OUTPUT

        # Clean up local tag on failure
        git tag -d "$TAG"
        exit 1

    - name: Create GitHub Pre-release
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false' && steps.create_tag.outputs.success == 'true'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"
        BASE_VERSION="${{ steps.version.outputs.base_version }}"
        PRERELEASE_NUM="${{ steps.prerelease.outputs.number }}"

        # Create pre-release using GitHub CLI
        gh release create "$TAG" \
          --title "Pre-release $PRERELEASE_NUM: $BASE_VERSION" \
          --notes "${{ steps.notes.outputs.notes }}" \
          --prerelease \
          --verify-tag

        echo "Pre-release created successfully"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on PR (new pre-release)
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'false' && steps.create_tag.outputs.success == 'true'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/$TAG"

        gh pr comment "${{ github.event.pull_request.number }}" \
          --body "🧪 **Pre-release $TAG created**

        This pre-release is available for testing via Swift Package Manager:

        \`\`\`swift
        .package(url: \"https://github.com/${{ github.repository }}\", exact: \"$TAG\")
        \`\`\`

        [View pre-release]($RELEASE_URL)

        When ready, merge this PR to create the final release."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify on PR (existing pre-release)
      if: steps.version.outputs.is_release_pr == 'true' && steps.check_existing.outputs.has_prerelease == 'true'
      shell: bash
      run: |
        TAG="${{ steps.check_existing.outputs.existing_tag }}"
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/$TAG"

        echo "Current commit already has pre-release $TAG - skipping duplicate creation"

        gh pr comment "${{ github.event.pull_request.number }}" \
          --body "ℹ️ **Pre-release $TAG already exists for this commit**

        No new pre-release created (no changes detected).

        Existing pre-release is available for testing:

        \`\`\`swift
        .package(url: \"https://github.com/${{ github.repository }}\", exact: \"$TAG\")
        \`\`\`

        [View pre-release]($RELEASE_URL)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup on failure
      if: failure() && steps.create_tag.outputs.success == 'true'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"
        echo "::warning::Pre-release creation failed. Cleaning up tag $TAG"

        # Delete remote tag
        git push --delete origin "$TAG" || echo "Failed to delete remote tag"

        echo "::error::Pre-release creation failed. Tag has been cleaned up."

    - name: Notify on failure
      if: failure() && steps.version.outputs.is_release_pr == 'true'
      shell: bash
      run: |
        TAG="${{ steps.prerelease.outputs.tag }}"
        RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        echo "::error::Pre-release workflow failed for $TAG"
        echo "::error::Workflow run: $RUN_URL"

        # Only comment if we got far enough to have a tag
        if [ -n "$TAG" ]; then
          gh pr comment "${{ github.event.pull_request.number }}" \
            --body "⚠️ **Pre-release creation failed for $TAG**

          Please check the [workflow logs]($RUN_URL) for details."
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
