name: Test Swift Package on iOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Swift 6.0 on iOS (${{ matrix.config }})
    runs-on: macos-latest # iOS testing requires macOS

    strategy:
      matrix:
        config: [debug, release]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select Xcode (latest)
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest'

    - name: Setup Swift 6.0
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: '6.0' # Use quotes to ensure correct version parsing

    - name: Check Swift version
      run: swift --version

    - name: Create iOS Simulator
      run: |
        # List available iOS runtimes and create a simulator
        xcrun simctl list runtimes ios
        # Create iPhone 15 simulator with latest iOS runtime
        RUNTIME_ID=$(xcrun simctl list runtimes ios -j | jq -r '.runtimes | map(select(.isAvailable)) | last.identifier')
        if [ -z "$RUNTIME_ID" ] || [ "$RUNTIME_ID" == "null" ]; then
          echo "::error::No iOS runtime available."
          exit 1
        fi
        echo "Using runtime: $RUNTIME_ID"
        xcrun simctl create "iPhone-CI" "iPhone 15" "$RUNTIME_ID"
        
    - name: Find iOS Simulator
      id: find_simulator
      run: |
        # Find the simulator we just created
        DEVICE_ID=$(xcrun simctl list devices -j | jq -r '.devices | to_entries[] | .value[] | select(.name=="iPhone-CI" and .isAvailable) | .udid')
        if [ -z "$DEVICE_ID" ]; then
          echo "::error::Failed to create iOS simulator."
          exit 1
        fi
        echo "Found iOS Simulator Device UDID: $DEVICE_ID"
        echo "SIMULATOR_DESTINATION=platform=iOS Simulator,id=$DEVICE_ID" >> $GITHUB_OUTPUT

    - name: Build and Test (${{ matrix.config }})
      run: |
        echo "Using simulator destination: ${{ steps.find_simulator.outputs.SIMULATOR_DESTINATION }}"
        xcodebuild build -scheme Portal -sdk $(xcrun --sdk iphonesimulator --show-sdk-path) -destination "${{ steps.find_simulator.outputs.SIMULATOR_DESTINATION }}" SWIFT_VERSION=6.0
